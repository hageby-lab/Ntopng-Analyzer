from sqlalchemy.orm import Session
from sqlalchemy import func, desc
from datetime import datetime, timedelta
import pandas as pd
from database import Alert
import re
from typing import Dict, List

class NtopngAnalyzer:
    def __init__(self):
        self.alert_patterns = {
            'flow_flood': r'Flow Flood|flow flood',
            'scan_detected': r'Scan|scan|Port Scan',
            'ddos_attack': r'DDoS|Flood|DDoS Attack',
            'suspicious_traffic': r'Suspicious|Anomaly|Anomalous',
            'bandwidth_alert': r'Bandwidth|Throughput|Traffic',
            'security_alert': r'Security|Alert|Threat|Malicious',
            'host_alert': r'Host|host',
            'interface_alert': r'Interface|interface'
        }
        
        self.severity_levels = {
            'critical': ['emergency', 'alert', 'critical', 'error'],
            'warning': ['warning', 'notice'],
            'info': ['info', 'debug', 'information']
        }

    def parse_alert_message(self, message: str) -> Dict:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ntopng"""
        analysis = {
            'message': message,
            'severity': 'info',
            'alert_type': 'unknown',
            'source_ip': None,
            'destination_ip': None,
            'protocol': None,
            'risk_score': 0,
            'category': 'network',
            'interface': 'unknown'
        }
        
        # –ü–æ–∏—Å–∫ IP-–∞–¥—Ä–µ—Å–æ–≤
        ip_pattern = r'\b(?:\d{1,3}\.){3}\d{1,3}\b'
        ips = re.findall(ip_pattern, message)
        if len(ips) >= 1:
            analysis['source_ip'] = ips[0]
        if len(ips) >= 2:
            analysis['destination_ip'] = ips[1]
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∞–ª–µ—Ä—Ç–∞
        for alert_type, pattern in self.alert_patterns.items():
            if re.search(pattern, message, re.IGNORECASE):
                analysis['alert_type'] = alert_type
                analysis['risk_score'] += 20
                break
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
        message_lower = message.lower()
        for severity, keywords in self.severity_levels.items():
            if any(keyword in message_lower for keyword in keywords):
                analysis['severity'] = severity
                if severity == 'critical':
                    analysis['risk_score'] += 50
                elif severity == 'warning':
                    analysis['risk_score'] += 25
                break
        
        # –ü–æ–∏—Å–∫ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
        protocols = ['TCP', 'UDP', 'ICMP', 'HTTP', 'HTTPS', 'DNS', 'SSH', 'FTP']
        for protocol in protocols:
            if protocol.upper() in message.upper():
                analysis['protocol'] = protocol
                break
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if any(word in message_lower for word in ['attack', 'security', 'threat', 'malicious']):
            analysis['category'] = 'security'
        elif any(word in message_lower for word in ['bandwidth', 'throughput', 'traffic', 'flow']):
            analysis['category'] = 'performance'
        elif any(word in message_lower for word in ['interface', 'host', 'device']):
            analysis['category'] = 'infrastructure'
        
        # –ü–æ–∏—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        interface_match = re.search(r'interface[:\s]+([^\s,]+)', message_lower)
        if interface_match:
            analysis['interface'] = interface_match.group(1)
        
        return analysis

    def get_alerts_by_timeframe(self, db: Session, minutes: int) -> List[Alert]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏"""
        since = datetime.utcnow() - timedelta(minutes=minutes)
        return db.query(Alert).filter(Alert.timestamp >= since).all()

    def analyze_timeframe(self, db: Session, minutes: int) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –∞–ª–µ—Ä—Ç–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏"""
        alerts = self.get_alerts_by_timeframe(db, minutes)
        
        if not alerts:
            return {
                'timeframe_minutes': minutes,
                'total_alerts': 0,
                'message': '–ù–µ—Ç –∞–ª–µ—Ä—Ç–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥'
            }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ severity
        severity_stats = {}
        for alert in alerts:
            severity_stats[alert.severity] = severity_stats.get(alert.severity, 0) + 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∞–ª–µ—Ä—Ç–æ–≤
        alert_type_stats = {}
        for alert in alerts:
            alert_type_stats[alert.alert_type] = alert_type_stats.get(alert.alert_type, 0) + 1
        
        # –¢–æ–ø –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø—Ä–æ–±–ª–µ–º
        source_ip_stats = {}
        for alert in alerts:
            if alert.source_ip:
                source_ip_stats[alert.source_ip] = source_ip_stats.get(alert.source_ip, 0) + 1
        
        # –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫
        avg_risk = sum(alert.risk_score for alert in alerts) / len(alerts)
        
        # –°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –∞–ª–µ—Ä—Ç—ã
        top_alerts = sorted(alert_type_stats.items(), key=lambda x: x[1], reverse=True)[:5]
        
        return {
            'timeframe_minutes': minutes,
            'timeframe_human': self._minutes_to_human(minutes),
            'total_alerts': len(alerts),
            'severity_stats': severity_stats,
            'alert_type_stats': alert_type_stats,
            'source_ip_stats': dict(sorted(source_ip_stats.items(), 
                                         key=lambda x: x[1], reverse=True)[:5]),
            'average_risk_score': round(avg_risk, 2),
            'top_alert_types': top_alerts,
            'critical_alerts_count': severity_stats.get('critical', 0),
            'warning_alerts_count': severity_stats.get('warning', 0),
            'start_time': datetime.utcnow() - timedelta(minutes=minutes),
            'end_time': datetime.utcnow()
        }

    def _minutes_to_human(self, minutes: int) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–∏–Ω—É—Ç –≤ —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        if minutes < 60:
            return f"{minutes} –º–∏–Ω—É—Ç"
        elif minutes < 1440:
            hours = minutes // 60
            return f"{hours} —á–∞—Å–æ–≤"
        else:
            days = minutes // 1440
            return f"{days} –¥–Ω–µ–π"

    def generate_report_message(self, analysis: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram"""
        timeframe = analysis['timeframe_human']
        
        if analysis['total_alerts'] == 0:
            return f"üìä –û—Ç—á–µ—Ç –∑–∞ {timeframe}\n‚úÖ –ù–µ—Ç –∞–ª–µ—Ä—Ç–æ–≤ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥"
        
        message = f"üìä –û–¢–ß–ï–¢ –ó–ê {timeframe.upper()}\n\n"
        message += f"üìà –í—Å–µ–≥–æ –∞–ª–µ—Ä—Ç–æ–≤: {analysis['total_alerts']}\n"
        message += f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {analysis['critical_alerts_count']}\n"
        message += f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {analysis['warning_alerts_count']}\n"
        message += f"üìä –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫: {analysis['average_risk_score']}%\n\n"
        
        message += "üîù –¢–æ–ø —Ç–∏–ø–æ–≤ –∞–ª–µ—Ä—Ç–æ–≤:\n"
        for alert_type, count in analysis['top_alert_types']:
            message += f"  ‚Ä¢ {alert_type}: {count}\n"
        
        if analysis['source_ip_stats']:
            message += "\nüîç –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ IP:\n"
            for ip, count in list(analysis['source_ip_stats'].items())[:3]:
                message += f"  ‚Ä¢ {ip}: {count} –∞–ª–µ—Ä—Ç–æ–≤\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if analysis['critical_alerts_count'] > 0:
            message += "\nüö® –í–ù–ò–ú–ê–ù–ò–ï: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã —Ç—Ä–µ–±—É—é—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞!"
        
        message += f"\n‚è∞ –ü–µ—Ä–∏–æ–¥: {analysis['start_time'].strftime('%H:%M')} - {analysis['end_time'].strftime('%H:%M')}"
        
        return message